//--------
// Grid dimensions
$fg-grid-width: 40px;
$fg-gutter: 20px;
$fg-false-gutter: 1.6;
$fg-col-total: 24;
$fg-col: $fg-grid-width + $fg-gutter;
$fg-col-1: $fg-col * 1;
$fg-col-2: $fg-col * 2;
$fg-col-3: $fg-col * 3;
$fg-col-4: $fg-col * 4;
$fg-col-5: $fg-col * 5;
$fg-col-6: $fg-col * 6;
$fg-col-7: $fg-col * 7;
$fg-col-8: $fg-col * 8;
$fg-col-9: $fg-col * 9;
$fg-col-10: $fg-col * 10;
$fg-col-11: $fg-col * 11;
$fg-col-12: $fg-col * 12;
$fg-col-13: $fg-col * 13;
$fg-col-14: $fg-col * 14;
$fg-col-15: $fg-col * 15;
$fg-col-16: $fg-col * 16;
$fg-col-17: $fg-col * 17;
$fg-col-18: $fg-col * 18;
$fg-col-19: $fg-col * 19;
$fg-col-20: $fg-col * 20;
$fg-col-21: $fg-col * 21;
$fg-col-22: $fg-col * 22;
$fg-col-23: $fg-col * 23;
$fg-col-24: $fg-col * 24;

// Grid based site dimensions
$site-grid-width: $fg-col * $fg-col-total;
$site-xl: $fg-col * 24;                           // 1440px
$site-desktop: $fg-col * 16;                      // 960px
$site-tablet: $fg-col * 12;                       // 720px
$site-mobile: $fg-col * 8;                        // 480px
$site-min-width: 320px;
$site-max-width: $site-desktop;
$site-mobile-breakpoint: $site-tablet;


//--------
// Calculate Grid Column Widths
// @$columns          The number of columns
// @$modifier         An override of the column dimension result
// @left-margin       Margin flag/string used to eliminate sibling left margins
// @$breakpoint       An overriding mobile breakpoint (screen width) for media query trigger
// @$gutter           The gutter width
// @false-gutter      The gutter width used when no css calc() support available
@mixin fg-grid-width(
  $columns,
  $modifier: 0,
  $left-margin: false,
  $breakpoint: $site-mobile-breakpoint,
  $gutter: $fg-gutter,
  $false-gutter: $fg-false-gutter
) {

  // Default column styling
  &, & * {
    box-sizing: border-box;
  }
  position: relative;
  float: left;
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }

  // Margin overrides (used by non-class based mixin convention)
  @if $left-margin {
    @if $left-margin == 'first' {

      // When css calc() and NOT css calc()
      html.csscalc &, html:not(.csscalc) & {
        margin-left: 0;
      }
    } @else {

      // When css calc()
      html.csscalc & {
        margin-left: $gutter;
      }

      // When NOT css calc()
      html:not(.csscalc) & {
        margin-left: #{$false-gutter + '%'};
      }
    }
  }

  // Full grid width
  @if $columns == 1 and not $modifier {
    width: 100%;
  }

  // Calculate column width using css 'calc()' when available
  @else if $modifier == 0 {

    // When css calc()
    html.csscalc & {
      width: -webkit-calc(((100% / #{$columns}) - #{$gutter}) + (#{$gutter / $columns}));
      width: calc(((100% / #{$columns}) - #{$gutter}) + (#{$gutter / $columns}));
    }

    // When NOT css calc()
    html:not(.csscalc) & {
      $ucw: (100 / $columns);
      $cw: 0;
      @if $columns == 1 {
        $cw: $ucw;
      } @else {
        $cw: $ucw - $false-gutter + ($false-gutter / $columns);
      }
      width: #{$cw + '%'};
    }
  }

  // Re-calculate column width based on modifier
  @else {
    $mw: 0;

    // 1/4 width
    @if $modifier == '1/4' {
      $mw: 25;
    }

    // 3/4 width
    @if $modifier == '3/4' {
      $mw: 75;
    }

    // 1/3 width
    @if $modifier == '1/3' {
      $mw: 33.3333;
    }

    // 2/3 width
    @if $modifier == '2/3' {
      $mw: 66.6666;
    }

    // 2/5 width
    @if $modifier == '2/5' {
      $mw: 40;
    }

    // 5/2 width
    @if $modifier == '3/5' {
      $mw: 60;
    }

    // When css calc()
    html.csscalc & {
      width: -webkit-calc(#{$mw + '%'} - (#{$gutter} / 2));
      width: calc(#{$mw + '%'} - (#{$gutter} / 2));
    }

    // When NOT css calc()
    html:not(.csscalc) & {
      $p: $mw / 100;
      $cw: ($p * 100) - $false-gutter + ($false-gutter / 2);
      @debug $cw;
      width: #{$cw + '%'};
    }
  }

  // Default mobile media query
  @media only screen and (max-width: $breakpoint) {

    // When css calc() and NOT css calc()
    html.csscalc &, html:not(.csscalc) & {
      width: 100%;
      margin-left: 0;
      & + * {
        margin-top: $gutter;
      }
    }
  }
}
